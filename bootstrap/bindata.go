// Code generated by go-bindata. (@generated) DO NOT EDIT.

 //Package bootstrap generated by go-bindata.// sources:
// bootstrap/src/.gitattributes
// bootstrap/src/.gitignore
// bootstrap/src/Dockerfile
// bootstrap/src/Makefile
// bootstrap/src/README.md
// bootstrap/src/check_main.go
// bootstrap/src/get_main.go
// bootstrap/src/put_main.go
package bootstrap

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

// Name return file name
func (fi bindataFileInfo) Name() string {
	return fi.name
}

// Size return file size
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}

// Mode return file mode
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}

// ModTime return file modify time
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}

// IsDir return file whether a directory
func (fi bindataFileInfo) IsDir() bool {
	return fi.mode&os.ModeDir != 0
}

// Sys return file is sys mode
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _bootstrapSrcGitattributes = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x64\x8f\x41\x6e\xf2\x30\x10\x85\xf7\x3e\xc5\x93\xb2\x43\xfa\x73\x03\x16\xbf\x20\x15\x95\x28\x2c\x9a\x1e\xc0\xd8\x13\x32\x62\x62\x47\xf6\xa4\xc0\xed\x2b\x70\xab\x56\xc9\xf6\x9b\xf7\xd9\xef\x55\x15\xfe\x7f\xb4\xc7\x7f\xdb\xa6\x6d\x36\xad\xa9\x2a\x00\x3b\x1b\xbc\x10\x84\x03\x81\x82\xe7\x70\xce\xb0\x93\xc6\xc1\x2a\x3b\x2b\x72\x47\x17\x13\x3a\x16\xca\xf0\xa4\xe4\x94\x3c\x6c\x2e\xb2\xd2\x4d\x61\x83\x87\x90\xfd\x24\x58\x91\x65\x12\x27\x0e\x36\xdd\x31\x05\x8d\x93\xeb\xc9\xd7\xc5\x6d\x7b\xce\xb8\xb2\x08\xfa\x52\xe1\xd7\x3e\x1c\x5b\x78\xea\x38\x90\xc7\x89\x24\x5e\x6b\xb3\x7a\xfe\xb5\x7e\x34\x33\xa6\x42\x73\x1b\x85\x1d\xab\xdc\xe1\x7a\x72\x97\x38\xe9\xb7\xfb\xcc\xe3\xca\xda\x63\xff\x52\x66\x79\x12\x1e\x58\x29\x65\x53\x61\x47\x32\xe6\x72\x77\x29\xe6\x8c\x51\xac\x76\x31\x0d\xc8\xd3\x38\xc6\xa4\x66\x55\xeb\x4d\x7f\xc6\x51\x94\xb5\x74\x66\x55\x0f\x1e\x0b\x76\x8e\x4b\x36\x44\xbf\x60\x79\x1a\x66\xcc\xec\x5f\x37\xcd\xe1\xbd\xc1\xfc\x81\x37\x7b\xa1\xc7\x90\x39\xdf\x46\x77\xa1\x54\x2e\x7f\xf9\x57\x00\x00\x00\xff\xff\x86\x17\x13\x29\xd3\x01\x00\x00")

func bootstrapSrcGitattributesBytes() ([]byte, error) {
	return bindataRead(
		_bootstrapSrcGitattributes,
		"bootstrap/src/.gitattributes",
	)
}

func bootstrapSrcGitattributes() (*asset, error) {
	bytes, err := bootstrapSrcGitattributesBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "bootstrap/src/.gitattributes", size: 467, mode: os.FileMode(438), modTime: time.Unix(1590264296, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _bootstrapSrcGitignore = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x24\x8f\x41\x6a\xec\x30\x10\x44\xf7\x3a\x45\xc1\x6c\xfe\x17\x13\xe5\x0e\x61\xb2\x08\x04\xb2\xc9\x01\xc6\x96\x7a\xe4\x86\xb6\xda\x48\x2d\x3b\xde\xe4\xec\xc1\x9e\x4d\xf3\xa0\x8b\x57\xd4\x05\x6f\x5c\x86\xca\xd4\xf0\xd0\x8a\xa5\x6a\xae\xc3\xdc\x30\x94\x84\x45\x7a\xe6\xd2\x9c\x0f\xf4\x43\xcf\xfb\xeb\x7c\x48\x22\xce\x87\xa6\x07\xee\xc2\xa3\x73\x17\x7c\x53\x33\x8c\x87\x69\xbf\x62\xec\x2c\x86\x8d\x6d\xc2\x3d\x2b\xec\xf8\xbd\xc4\xbb\xf3\xe1\xc0\x23\xfe\xd5\x6d\xe9\x06\x7d\xc0\x26\x42\x56\x44\x5d\xa9\x0e\x99\x60\xaa\x72\x45\x5b\x28\xf2\x83\xe3\x20\xb2\x63\x9b\xa8\xa0\x37\x4a\x4f\xe5\x27\x1b\x7d\xdc\xde\x9d\x0f\xda\x4f\xd9\x8d\x16\x2a\x89\x4a\xdc\x91\xb8\x52\x34\x3d\xe7\xfc\xab\x34\xeb\x4a\x67\x43\xd4\x79\xa6\x62\x18\x49\x74\x83\x29\xb8\x44\xe9\x89\xc0\xf6\xdf\x5d\xb0\x52\x49\x5a\x5f\x9d\xf3\x41\x34\xbb\xbf\x00\x00\x00\xff\xff\xf1\xba\x32\x9b\x14\x01\x00\x00")

func bootstrapSrcGitignoreBytes() ([]byte, error) {
	return bindataRead(
		_bootstrapSrcGitignore,
		"bootstrap/src/.gitignore",
	)
}

func bootstrapSrcGitignore() (*asset, error) {
	bytes, err := bootstrapSrcGitignoreBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "bootstrap/src/.gitignore", size: 276, mode: os.FileMode(438), modTime: time.Unix(1590264307, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _bootstrapSrcDockerfile = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x01\x00\x00\xff\xff\x00\x00\x00\x00\x00\x00\x00\x00")

func bootstrapSrcDockerfileBytes() ([]byte, error) {
	return bindataRead(
		_bootstrapSrcDockerfile,
		"bootstrap/src/Dockerfile",
	)
}

func bootstrapSrcDockerfile() (*asset, error) {
	bytes, err := bootstrapSrcDockerfileBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "bootstrap/src/Dockerfile", size: 0, mode: os.FileMode(438), modTime: time.Unix(1590264157, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _bootstrapSrcMakefile = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xca\xcd\x4e\xcb\xcc\x49\x55\xb0\xb2\x55\x50\xd1\x48\x4c\x2a\x2e\x48\x2c\xc9\x50\x50\xd1\xc8\x49\x2c\x2e\x29\xcf\x2f\x4a\x51\x50\xd1\xf0\x75\xf4\x76\x75\xf3\xf4\x71\x8d\xf7\xf1\x0c\x0e\xd1\xd4\xd4\xe4\x4a\xc9\x2c\x82\x28\x07\x31\x54\x34\x20\x06\x68\x6a\x72\x71\xa5\x56\x14\xe4\x17\x95\x28\xf8\xf8\xbb\xc7\x87\x04\x85\xfa\x39\x3b\x86\xb8\xda\x96\x14\x95\xa6\x22\x4b\xb8\x78\x06\xb9\x3a\x87\xf8\x07\x45\xda\x82\xf5\x6b\x72\x71\xe9\x05\x78\xf8\xfb\x45\x5a\x29\x94\xa4\x16\x97\x70\x81\x08\x2b\x2e\x4e\x87\xf4\x7c\x30\x5f\x41\x57\x37\x39\xbf\x2c\xb5\x48\xa1\xba\x5a\x41\xcf\x37\x3f\xa5\x34\x27\x55\xa1\xb6\x56\x5f\x4f\x4f\x8f\x0b\x10\x00\x00\xff\xff\xbb\xfd\xa6\x16\xb8\x00\x00\x00")

func bootstrapSrcMakefileBytes() ([]byte, error) {
	return bindataRead(
		_bootstrapSrcMakefile,
		"bootstrap/src/Makefile",
	)
}

func bootstrapSrcMakefile() (*asset, error) {
	bytes, err := bootstrapSrcMakefileBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "bootstrap/src/Makefile", size: 184, mode: os.FileMode(438), modTime: time.Unix(1590318759, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _bootstrapSrcReadmeMd = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x52\x56\xa8\xae\x56\xd0\xf3\xcd\x4f\x29\xcd\x49\x55\xa8\xad\xe5\xe2\x72\xce\xcf\x4b\xce\x2f\x2d\x2a\x4e\x55\x28\x4a\x2d\xce\x2f\x2d\x4a\x4e\x55\x48\xcb\x2f\x52\xd0\xd3\xd3\xe3\xe2\x52\x56\x56\x70\xce\xcf\x4b\xcb\x4c\x07\x33\xdd\x53\x4b\xc0\x74\x40\x29\x84\x76\xad\x48\xcc\x2d\xc8\x49\xe5\xe2\x4a\x48\x48\xa8\x4c\xcc\xcd\x01\xd1\x5c\x80\x00\x00\x00\xff\xff\x92\xae\x22\x55\x60\x00\x00\x00")

func bootstrapSrcReadmeMdBytes() ([]byte, error) {
	return bindataRead(
		_bootstrapSrcReadmeMd,
		"bootstrap/src/README.md",
	)
}

func bootstrapSrcReadmeMd() (*asset, error) {
	bytes, err := bootstrapSrcReadmeMdBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "bootstrap/src/README.md", size: 96, mode: os.FileMode(438), modTime: time.Unix(1590318783, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _bootstrapSrcCheck_mainGo = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x34\x8f\x41\x6b\xf3\x30\x0c\x86\xcf\xd6\xaf\xd0\x67\xf8\x46\x02\x6d\x72\xef\xe8\xa9\xb0\xdb\x60\x6c\x8c\x9d\x5d\x5b\x49\xbd\x3a\x56\x26\xdb\x83\x51\xf2\xdf\x87\xd3\xe5\x2a\xe9\x79\x9f\x57\xb3\xb1\x57\x33\x12\x4e\xc6\x47\x00\x3f\xcd\x2c\x19\x1b\x50\x9a\xa2\x65\xe7\xe3\xd8\x7f\x26\x8e\x1a\x94\x0e\x3c\x6a\x00\x25\x81\x47\xd4\xa3\xcf\x97\x72\xee\x2c\x4f\xbd\xf3\xa3\xcf\x26\xb0\x25\x13\x7b\xcb\xd1\x72\x91\x44\x7b\xa1\xc4\x45\x2c\xed\x83\x3f\x8b\x91\x9f\x7e\xe5\xd5\x36\x46\x7d\xbb\x61\xf7\xcc\xae\x04\xc2\x65\xd1\xd0\x02\x0c\x25\xda\xb5\x48\xd3\xe2\x0d\x94\x8f\x73\xc9\x78\x38\x62\x55\x76\x1f\xe2\x33\xbd\x65\x57\xb7\xa0\x1c\x0d\x24\xf7\xc5\x29\x70\xa2\xa6\x05\x50\xdf\x46\x50\xe8\xab\x50\xca\x28\xe9\x62\x84\x5c\x77\xba\x90\xbd\xbe\xde\x87\xa0\xfc\x80\x24\x52\x33\xeb\x57\xdd\x7b\x9c\x4c\x3d\x0c\xcd\xea\xda\xe1\xc3\x1f\xde\x3e\xae\x77\xff\x8e\x18\x7d\xa8\x5d\x54\x35\x3d\x99\x6c\xc2\xd0\xe8\xc1\xf8\x40\x0e\x33\x63\xd9\x02\x36\xef\x01\xff\x27\xbd\xab\x70\x0b\x6a\x01\x58\xb9\x17\xf1\x31\x87\xd8\x68\x5b\xcb\xa0\xe5\x69\x0e\x94\x49\xb7\xb0\xc0\x6f\x00\x00\x00\xff\xff\x2d\xc5\xed\x78\x80\x01\x00\x00")

func bootstrapSrcCheck_mainGoBytes() ([]byte, error) {
	return bindataRead(
		_bootstrapSrcCheck_mainGo,
		"bootstrap/src/check_main.go",
	)
}

func bootstrapSrcCheck_mainGo() (*asset, error) {
	bytes, err := bootstrapSrcCheck_mainGoBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "bootstrap/src/check_main.go", size: 384, mode: os.FileMode(438), modTime: time.Unix(1590318774, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _bootstrapSrcGet_mainGo = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x34\x8f\x41\x6b\xf3\x30\x0c\x86\xcf\xd6\xaf\xd0\x67\xf8\x46\x02\x6d\x72\xef\xe8\xa9\xb0\xdb\x60\x6c\x8c\x9d\x5d\x5b\x49\xbd\x3a\x56\x26\xdb\x83\x51\xf2\xdf\x87\xd3\xe5\x2a\xe9\x79\x9f\x57\xb3\xb1\x57\x33\x12\x4e\xc6\x47\x00\x3f\xcd\x2c\x19\x1b\x50\x9a\xa2\x65\xe7\xe3\xd8\x7f\x26\x8e\x1a\x94\x0e\x3c\x6a\x00\x25\x81\x47\xd4\xa3\xcf\x97\x72\xee\x2c\x4f\xbd\xf3\xa3\xcf\x26\xb0\x25\x13\x7b\xcb\xd1\x72\x91\x44\x7b\xa1\xc4\x45\x2c\xed\x83\x3f\x8b\x91\x9f\x7e\xe5\xd5\x36\x46\x7d\xbb\x61\xf7\xcc\xae\x04\xc2\x65\xd1\xd0\x02\x0c\x25\xda\xb5\x48\xd3\xe2\x0d\x94\x8f\x73\xc9\x78\x38\x62\x55\x76\x1f\xe2\x33\xbd\x65\x57\xb7\xa0\x1c\x0d\x24\xf7\xc5\x29\x70\xa2\xa6\x05\x50\xdf\x46\x50\xe8\xab\x50\xca\x28\xe9\x62\x84\x5c\x77\xba\x90\xbd\xbe\xde\x87\xa0\xfc\x80\x24\x52\x33\xeb\x57\xdd\x7b\x9c\x4c\x3d\x0c\xcd\xea\xda\xe1\xc3\x1f\xde\x3e\xae\x77\xff\x8e\x18\x7d\xa8\x5d\x54\x35\x3d\x99\x6c\xc2\xd0\xe8\xc1\xf8\x40\x0e\x33\x63\xd9\x02\x36\xef\x01\xff\x27\xbd\xab\x70\x0b\x6a\x01\x58\xb9\x17\xf1\x31\x87\xd8\x68\x5b\xcb\xa0\xe5\x69\x0e\x94\x49\xb7\xb0\xc0\x6f\x00\x00\x00\xff\xff\x2d\xc5\xed\x78\x80\x01\x00\x00")

func bootstrapSrcGet_mainGoBytes() ([]byte, error) {
	return bindataRead(
		_bootstrapSrcGet_mainGo,
		"bootstrap/src/get_main.go",
	)
}

func bootstrapSrcGet_mainGo() (*asset, error) {
	bytes, err := bootstrapSrcGet_mainGoBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "bootstrap/src/get_main.go", size: 384, mode: os.FileMode(438), modTime: time.Unix(1590318769, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _bootstrapSrcPut_mainGo = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x34\x8f\x41\x6b\xf3\x30\x0c\x86\xcf\xd6\xaf\xd0\x67\xf8\x46\x02\x6d\x72\xef\xe8\xa9\xb0\xdb\x60\x6c\x8c\x9d\x5d\x5b\x49\xbd\x3a\x56\x26\xdb\x83\x51\xf2\xdf\x87\xd3\xe5\x2a\xe9\x79\x9f\x57\xb3\xb1\x57\x33\x12\x4e\xc6\x47\x00\x3f\xcd\x2c\x19\x1b\x50\x9a\xa2\x65\xe7\xe3\xd8\x7f\x26\x8e\x1a\x94\x0e\x3c\x6a\x00\x25\x81\x47\xd4\xa3\xcf\x97\x72\xee\x2c\x4f\xbd\xf3\xa3\xcf\x26\xb0\x25\x13\x7b\xcb\xd1\x72\x91\x44\x7b\xa1\xc4\x45\x2c\xed\x83\x3f\x8b\x91\x9f\x7e\xe5\xd5\x36\x46\x7d\xbb\x61\xf7\xcc\xae\x04\xc2\x65\xd1\xd0\x02\x0c\x25\xda\xb5\x48\xd3\xe2\x0d\x94\x8f\x73\xc9\x78\x38\x62\x55\x76\x1f\xe2\x33\xbd\x65\x57\xb7\xa0\x1c\x0d\x24\xf7\xc5\x29\x70\xa2\xa6\x05\x50\xdf\x46\x50\xe8\xab\x50\xca\x28\xe9\x62\x84\x5c\x77\xba\x90\xbd\xbe\xde\x87\xa0\xfc\x80\x24\x52\x33\xeb\x57\xdd\x7b\x9c\x4c\x3d\x0c\xcd\xea\xda\xe1\xc3\x1f\xde\x3e\xae\x77\xff\x8e\x18\x7d\xa8\x5d\x54\x35\x3d\x99\x6c\xc2\xd0\xe8\xc1\xf8\x40\x0e\x33\x63\xd9\x02\x36\xef\x01\xff\x27\xbd\xab\x70\x0b\x6a\x01\x58\xb9\x17\xf1\x31\x87\xd8\x68\x5b\xcb\xa0\xe5\x69\x0e\x94\x49\xb7\xb0\xc0\x6f\x00\x00\x00\xff\xff\x2d\xc5\xed\x78\x80\x01\x00\x00")

func bootstrapSrcPut_mainGoBytes() ([]byte, error) {
	return bindataRead(
		_bootstrapSrcPut_mainGo,
		"bootstrap/src/put_main.go",
	)
}

func bootstrapSrcPut_mainGo() (*asset, error) {
	bytes, err := bootstrapSrcPut_mainGoBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "bootstrap/src/put_main.go", size: 384, mode: os.FileMode(438), modTime: time.Unix(1590318765, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"bootstrap/src/.gitattributes": bootstrapSrcGitattributes,
	"bootstrap/src/.gitignore":     bootstrapSrcGitignore,
	"bootstrap/src/Dockerfile":     bootstrapSrcDockerfile,
	"bootstrap/src/Makefile":       bootstrapSrcMakefile,
	"bootstrap/src/README.md":      bootstrapSrcReadmeMd,
	"bootstrap/src/check_main.go":  bootstrapSrcCheck_mainGo,
	"bootstrap/src/get_main.go":    bootstrapSrcGet_mainGo,
	"bootstrap/src/put_main.go":    bootstrapSrcPut_mainGo,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"bootstrap": &bintree{nil, map[string]*bintree{
		"src": &bintree{nil, map[string]*bintree{
			".gitattributes": &bintree{bootstrapSrcGitattributes, map[string]*bintree{}},
			".gitignore":     &bintree{bootstrapSrcGitignore, map[string]*bintree{}},
			"Dockerfile":     &bintree{bootstrapSrcDockerfile, map[string]*bintree{}},
			"Makefile":       &bintree{bootstrapSrcMakefile, map[string]*bintree{}},
			"README.md":      &bintree{bootstrapSrcReadmeMd, map[string]*bintree{}},
			"check_main.go":  &bintree{bootstrapSrcCheck_mainGo, map[string]*bintree{}},
			"get_main.go":    &bintree{bootstrapSrcGet_mainGo, map[string]*bintree{}},
			"put_main.go":    &bintree{bootstrapSrcPut_mainGo, map[string]*bintree{}},
		}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}
