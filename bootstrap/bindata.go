// Code generated for package bootstrap by go-bindata DO NOT EDIT. (@generated)
// sources:
// bootstrap/src/.gitattributes
// bootstrap/src/.gitignore
// bootstrap/src/Dockerfile
// bootstrap/src/Makefile
// bootstrap/src/README.md
// bootstrap/src/cmd.go
// bootstrap/src/go.mod
// bootstrap/src/resource.go
package bootstrap

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

// Name return file name
func (fi bindataFileInfo) Name() string {
	return fi.name
}

// Size return file size
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}

// Mode return file mode
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}

// Mode return file modify time
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}

// IsDir return file whether a directory
func (fi bindataFileInfo) IsDir() bool {
	return fi.mode&os.ModeDir != 0
}

// Sys return file is sys mode
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _bootstrapSrcGitattributes = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x64\x8f\x41\x6e\xf2\x30\x10\x85\xf7\x3e\xc5\x93\xb2\x43\xfa\x73\x03\x16\xbf\x20\x15\x95\x28\x2c\x9a\x1e\xc0\xd8\x13\x32\x62\x62\x47\xf6\xa4\xc0\xed\x2b\x70\xab\x56\xc9\xf6\x9b\xf7\xd9\xef\x55\x15\xfe\x7f\xb4\xc7\x7f\xdb\xa6\x6d\x36\xad\xa9\x2a\x00\x3b\x1b\xbc\x10\x84\x03\x81\x82\xe7\x70\xce\xb0\x93\xc6\xc1\x2a\x3b\x2b\x72\x47\x17\x13\x3a\x16\xca\xf0\xa4\xe4\x94\x3c\x6c\x2e\xb2\xd2\x4d\x61\x83\x87\x90\xfd\x24\x58\x91\x65\x12\x27\x0e\x36\xdd\x31\x05\x8d\x93\xeb\xc9\xd7\xc5\x6d\x7b\xce\xb8\xb2\x08\xfa\x52\xe1\xd7\x3e\x1c\x5b\x78\xea\x38\x90\xc7\x89\x24\x5e\x6b\xb3\x7a\xfe\xb5\x7e\x34\x33\xa6\x42\x73\x1b\x85\x1d\xab\xdc\xe1\x7a\x72\x97\x38\xe9\xb7\xfb\xcc\xe3\xca\xda\x63\xff\x52\x66\x79\x12\x1e\x58\x29\x65\x53\x61\x47\x32\xe6\x72\x77\x29\xe6\x8c\x51\xac\x76\x31\x0d\xc8\xd3\x38\xc6\xa4\x66\x55\xeb\x4d\x7f\xc6\x51\x94\xb5\x74\x66\x55\x0f\x1e\x0b\x76\x8e\x4b\x36\x44\xbf\x60\x79\x1a\x66\xcc\xec\x5f\x37\xcd\xe1\xbd\xc1\xfc\x81\x37\x7b\xa1\xc7\x90\x39\xdf\x46\x77\xa1\x54\x2e\x7f\xf9\x57\x00\x00\x00\xff\xff\x86\x17\x13\x29\xd3\x01\x00\x00")

func bootstrapSrcGitattributesBytes() ([]byte, error) {
	return bindataRead(
		_bootstrapSrcGitattributes,
		"bootstrap/src/.gitattributes",
	)
}

func bootstrapSrcGitattributes() (*asset, error) {
	bytes, err := bootstrapSrcGitattributesBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "bootstrap/src/.gitattributes", size: 467, mode: os.FileMode(438), modTime: time.Unix(1590264296, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _bootstrapSrcGitignore = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x24\x8f\x41\x6a\xec\x30\x10\x44\xf7\x3a\x45\xc1\x6c\xfe\x17\x13\xe5\x0e\x61\xb2\x08\x04\xb2\xc9\x01\xc6\x96\x7a\xe4\x86\xb6\xda\x48\x2d\x3b\xde\xe4\xec\xc1\x9e\x4d\xf3\xa0\x8b\x57\xd4\x05\x6f\x5c\x86\xca\xd4\xf0\xd0\x8a\xa5\x6a\xae\xc3\xdc\x30\x94\x84\x45\x7a\xe6\xd2\x9c\x0f\xf4\x43\xcf\xfb\xeb\x7c\x48\x22\xce\x87\xa6\x07\xee\xc2\xa3\x73\x17\x7c\x53\x33\x8c\x87\x69\xbf\x62\xec\x2c\x86\x8d\x6d\xc2\x3d\x2b\xec\xf8\xbd\xc4\xbb\xf3\xe1\xc0\x23\xfe\xd5\x6d\xe9\x06\x7d\xc0\x26\x42\x56\x44\x5d\xa9\x0e\x99\x60\xaa\x72\x45\x5b\x28\xf2\x83\xe3\x20\xb2\x63\x9b\xa8\xa0\x37\x4a\x4f\xe5\x27\x1b\x7d\xdc\xde\x9d\x0f\xda\x4f\xd9\x8d\x16\x2a\x89\x4a\xdc\x91\xb8\x52\x34\x3d\xe7\xfc\xab\x34\xeb\x4a\x67\x43\xd4\x79\xa6\x62\x18\x49\x74\x83\x29\xb8\x44\xe9\x89\xc0\xf6\xdf\x5d\xb0\x52\x49\x5a\x5f\x9d\xf3\x41\x34\xbb\xbf\x00\x00\x00\xff\xff\xf1\xba\x32\x9b\x14\x01\x00\x00")

func bootstrapSrcGitignoreBytes() ([]byte, error) {
	return bindataRead(
		_bootstrapSrcGitignore,
		"bootstrap/src/.gitignore",
	)
}

func bootstrapSrcGitignore() (*asset, error) {
	bytes, err := bootstrapSrcGitignoreBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "bootstrap/src/.gitignore", size: 276, mode: os.FileMode(438), modTime: time.Unix(1590264307, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _bootstrapSrcDockerfile = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x74\x90\x41\x4b\x03\x31\x10\x85\xef\xf9\x15\x43\x0f\x3d\x28\xd9\xb0\xe8\xa9\xd0\xc3\xda\xad\x50\xec\xb6\xb2\x28\x22\xe2\x21\x4d\xc6\xdd\xd0\x6c\x26\x6c\x12\x10\x4a\xff\xbb\x74\x2d\x42\x97\x7a\x99\xc3\x7b\x1f\xf3\xde\xcc\x63\xbd\xad\xa0\x21\x2b\x5d\x33\xcb\xb3\xfc\x1e\x64\x80\x5d\x32\x56\x63\xcf\x8a\xb2\x84\x0c\x44\x43\x22\xf4\x4a\x1c\x0e\x90\x55\xa4\x93\x45\x38\x1e\xd9\xdb\xb6\x7e\x2a\x57\xf5\x3f\x6e\xfd\xba\x81\x4e\xee\xf1\x77\x15\x63\x43\x8a\xb4\xde\x38\x9c\xdd\x65\x79\x7e\x4a\xe9\x31\x50\xea\x15\x0e\xb0\xf4\x7b\x90\x5a\x03\xe7\xc9\x6b\x19\x11\x38\x77\xc4\x95\x54\x2d\xc2\x4e\x86\x76\x18\x5c\x51\xe7\x2d\x46\x43\x0e\xc8\xa3\x0b\xa1\x85\xc6\x44\xb6\xd8\x3e\xbf\x03\xe7\x5f\x3d\x75\xf3\x73\xf7\xeb\xbd\xc4\xe0\x82\x20\x1f\xc5\x45\xbc\x75\xc0\xc3\xa5\x2e\x1a\x8c\x23\xc5\x38\x98\x4e\xaf\xb2\x3e\x8d\x59\x4a\xf1\x04\xab\xb6\x23\x0d\xb7\xdf\x23\xf7\x86\x2d\xaa\x12\x3e\x26\x62\x67\x9c\x38\x9d\x36\xf9\x3c\x3f\xe9\xaf\xd6\xba\x78\x58\xae\xa1\x2a\x56\x9b\x97\x62\xb5\x59\xd6\x73\x6d\x1a\x13\xa5\x25\x85\xd2\xb1\x9f\x00\x00\x00\xff\xff\x18\x8d\x20\x65\xb7\x01\x00\x00")

func bootstrapSrcDockerfileBytes() ([]byte, error) {
	return bindataRead(
		_bootstrapSrcDockerfile,
		"bootstrap/src/Dockerfile",
	)
}

func bootstrapSrcDockerfile() (*asset, error) {
	bytes, err := bootstrapSrcDockerfileBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "bootstrap/src/Dockerfile", size: 439, mode: os.FileMode(438), modTime: time.Unix(1591984292, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _bootstrapSrcMakefile = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x94\x52\xc1\x6e\xa3\x30\x10\x3d\xd7\x5f\x31\xaa\x7c\xc0\x07\x93\x3d\x23\x21\x2d\x01\x6f\x8a\x4a\x71\xe5\x50\x69\x73\x42\x14\x3b\x14\x05\xe2\xc8\x38\xc9\xae\xa2\xfc\xfb\x0a\xbc\x69\xb9\xe4\xd0\xcb\xf0\xd0\x7b\x6f\xc6\xf3\xec\x7e\xb7\x6d\x3b\x05\x41\x08\xd8\xab\xde\x87\x43\x65\x3f\x00\x7b\x5d\x35\xd8\xb3\x36\x12\xb0\xf7\x12\x3d\xb3\x5f\x69\xc6\xca\x2c\x5d\x17\x84\x10\x24\x5b\xe3\xe4\x23\xc0\x9e\x6b\x40\x08\x42\xcb\xb7\x34\x4b\xca\x24\x15\x23\xfd\x7e\x6c\x3b\x89\x12\x1e\x3f\x33\x51\x0a\xf6\xca\x21\x08\xd1\x32\xcd\x23\xb1\x19\xe9\xfa\x43\xd5\x3b\xc4\x7e\x17\x2c\x5f\xa7\x3c\x1f\x49\xa4\xfe\x1c\xb4\xb1\x90\xf1\x55\x59\x88\xb7\x3c\x8e\x0a\x16\x5a\x73\x54\x73\x22\x49\x05\x8b\x0b\x2e\x36\xe1\x34\x9f\x20\xe4\xbf\x3e\xf1\x7c\x13\x80\x55\x83\x45\x63\x09\xd0\xc3\xcf\x46\x4f\xff\x40\x69\xad\x4f\xca\xc0\xe5\x02\xfe\x8b\x96\xc7\x4e\xc1\xf5\xba\xf0\x7d\xff\xcb\xd7\xe8\x6d\x6f\xd1\x54\x9d\x73\xdb\x5b\xa0\x67\x98\x49\xa4\xae\x77\xca\x20\xf7\x19\x45\x0e\xb9\x1d\x81\x5a\xc0\xde\x6c\x51\x12\x48\x75\x9a\xdb\x5d\x14\x53\xfd\x7f\xcc\x87\xbe\xda\x29\x68\x34\x75\x1d\x5c\x2c\xe1\x94\x09\x50\xba\xd7\xf4\x60\xda\xbd\xa5\xb2\x35\xaa\xb6\xda\xfc\xbd\x63\x68\x94\xfd\x8e\xfc\x70\xbc\x23\x9f\x65\xe1\x1c\xe8\x06\xc6\x65\xe3\x15\x2f\x59\x1e\x2d\x33\x96\x84\x3f\x60\xc5\xf9\x3a\xc4\x17\xbe\xbe\xde\x60\x24\xe2\xa7\x2b\x34\xfa\x16\x87\x06\xec\x7d\x3e\x05\xb2\xc0\x9e\x1b\x4f\xb0\xf7\x79\xdd\x04\x68\x27\xb7\x5d\xd5\x0c\xe1\x23\x1d\x80\x9e\x1f\x81\x9e\xa0\xee\xe5\x97\x7a\xd1\x57\xed\xde\x6f\x34\xfa\x17\x00\x00\xff\xff\x9c\xab\x46\xa6\xa1\x02\x00\x00")

func bootstrapSrcMakefileBytes() ([]byte, error) {
	return bindataRead(
		_bootstrapSrcMakefile,
		"bootstrap/src/Makefile",
	)
}

func bootstrapSrcMakefile() (*asset, error) {
	bytes, err := bootstrapSrcMakefileBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "bootstrap/src/Makefile", size: 673, mode: os.FileMode(438), modTime: time.Unix(1591984539, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _bootstrapSrcReadmeMd = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x52\x56\xa8\xae\x56\xd0\xf3\xcd\x4f\x29\xcd\x49\x55\xa8\xad\xe5\xe2\x72\xce\xcf\x4b\xce\x2f\x2d\x2a\x4e\x55\x28\x4a\x2d\xce\x2f\x2d\x4a\x4e\x55\x48\xcb\x2f\x52\xd0\xd3\xd3\xe3\xe2\x52\x56\x56\x70\xce\xcf\x4b\xcb\x4c\x07\x33\xdd\x53\x4b\xc0\x74\x40\x29\x84\x76\xad\x48\xcc\x2d\xc8\x49\xe5\xe2\x4a\x48\x48\xa8\x4c\xcc\xcd\x01\xd1\x5c\x80\x00\x00\x00\xff\xff\x92\xae\x22\x55\x60\x00\x00\x00")

func bootstrapSrcReadmeMdBytes() ([]byte, error) {
	return bindataRead(
		_bootstrapSrcReadmeMd,
		"bootstrap/src/README.md",
	)
}

func bootstrapSrcReadmeMd() (*asset, error) {
	bytes, err := bootstrapSrcReadmeMdBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "bootstrap/src/README.md", size: 96, mode: os.FileMode(438), modTime: time.Unix(1590318783, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _bootstrapSrcCmdGo = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x94\x93\x41\x6b\xdc\x30\x10\x85\xcf\xd6\xaf\x98\x0a\x0a\x36\x24\x5e\xda\x63\x68\x0e\x65\x21\x85\x42\xa0\x24\xa5\x3d\x94\x1e\x14\x69\xec\x9d\x46\xd6\x38\x23\x39\xa1\x2c\xfe\xef\x45\xf2\x6e\x42\x76\x1b\x42\x8e\xf6\x68\xde\xf7\xe6\x69\x34\x1a\x7b\x6b\x7a\x84\xc1\x50\x50\x8a\x86\x91\x25\x41\xad\x2a\xed\xb9\xd7\x4a\x55\xe2\xb9\x07\xdd\x53\xda\x4c\x37\xad\xe5\x61\xe5\xa8\xa7\x64\x3c\x5b\x34\x61\x65\x39\x58\x9e\x24\xe2\xa9\x60\xe4\x49\x2c\x9e\x7a\xba\x11\x23\x7f\x57\xa5\xbf\xda\xff\x06\xbd\xdd\x42\x7b\xc9\x6e\xf2\x08\xf3\xac\x55\xa3\x54\x37\x05\x5b\xb8\x75\x03\x5b\x55\x51\x18\xa7\x04\x67\xe7\x90\x91\xed\x4f\xa1\x84\xd7\xc9\xe5\xaa\xaa\x1c\x76\x28\x4b\x61\xed\x39\x62\xdd\x28\x55\xdd\x1b\x01\xc1\xbb\x09\x63\x82\x3d\xa7\xcd\x98\xf5\xe0\x60\x9e\xaf\x96\x92\xaa\x50\xa4\xc8\x2e\xdf\xed\x15\x1a\x57\x17\x58\xa3\x2a\xea\x20\x97\xdf\x9d\x43\x20\x9f\x5d\x54\x99\x71\x61\x92\xf1\x5d\xad\x3b\x43\x1e\x1d\x24\x06\x41\xe3\x1e\x61\xa5\xf9\x0c\xde\x47\x7d\x92\xbb\x1b\x55\xcd\x6a\xc1\x3c\x51\xae\x17\x3b\x3f\x8c\x27\x67\x52\x36\xfc\x0a\x8b\xc2\x7d\x3e\x0b\xbb\xbc\x2c\x87\x8e\xfa\x23\xc8\x76\x0b\xd4\x41\xc0\x65\x48\xbd\xde\xa0\xbd\xd5\x30\xcf\x45\xdd\x63\xa8\x39\xb6\x9f\xa5\x8f\x0d\x7c\x82\x8f\x47\x8c\x81\x62\xa4\xd0\x83\x91\x7e\x1a\x30\xa4\xa8\x8b\x6c\xe5\xa8\x24\xb4\xeb\xfd\xf5\xe1\x77\x01\x61\xc8\x31\xaa\x72\x89\x23\x87\x88\xc5\xc8\x12\xe5\x51\xda\xf5\x6e\xf0\x97\x0c\x9e\x80\x23\x79\x14\x7d\x43\xf2\x23\x4a\xc7\x32\x80\xcd\x4a\x2f\xe4\x81\x77\x3b\xdc\x17\x4c\x4b\x1a\xab\x15\x3c\xe4\x0d\x82\x01\x93\x71\x26\x99\x2c\xc5\x53\xca\x2b\xe6\x48\x9e\x6e\x6b\x99\xac\xbd\xdc\x1d\x6b\xbf\xf3\x05\x79\x8c\x75\x47\x1e\x47\x93\x36\xed\x57\xa6\x50\x3b\x92\x13\xd0\xfb\xb1\x75\xf3\x06\xff\xcf\x6d\xb4\x7f\x22\x87\x83\x29\x9e\x65\x7d\xe0\xab\x3c\x83\xd7\x97\xe7\x10\xb7\xef\xcf\x7f\x62\x72\xfc\x9f\x75\xcd\xed\xdf\x84\x42\xf2\xa1\xce\x8f\xd3\xf3\x03\xca\xfe\x36\xc1\xf2\x30\x7a\x4c\xa8\x1b\x35\xab\x7f\x01\x00\x00\xff\xff\xe7\x68\x84\x97\x24\x04\x00\x00")

func bootstrapSrcCmdGoBytes() ([]byte, error) {
	return bindataRead(
		_bootstrapSrcCmdGo,
		"bootstrap/src/cmd.go",
	)
}

func bootstrapSrcCmdGo() (*asset, error) {
	bytes, err := bootstrapSrcCmdGoBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "bootstrap/src/cmd.go", size: 1060, mode: os.FileMode(438), modTime: time.Unix(1591984625, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _bootstrapSrcGoMod = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x01\x00\x00\xff\xff\x00\x00\x00\x00\x00\x00\x00\x00")

func bootstrapSrcGoModBytes() ([]byte, error) {
	return bindataRead(
		_bootstrapSrcGoMod,
		"bootstrap/src/go.mod",
	)
}

func bootstrapSrcGoMod() (*asset, error) {
	bytes, err := bootstrapSrcGoModBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "bootstrap/src/go.mod", size: 0, mode: os.FileMode(438), modTime: time.Unix(1590593254, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _bootstrapSrcResourceGo = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xb4\x55\xcb\x6e\xdb\x30\x10\x3c\x5b\x5f\xb1\xd0\x49\x2a\x12\xf9\xde\x6b\x50\xe4\xd2\x16\x41\x82\xb6\x87\x20\x40\x68\x6a\x6d\xb3\x91\x48\x75\xb9\x74\x60\x04\xfd\xf7\x82\x0f\x3d\x9d\x20\x28\xea\xe6\x12\x81\x5a\xce\xcc\xce\xce\x5a\x9d\x90\x4f\x62\x87\x40\x68\x8d\x23\x89\x59\xa6\xda\xce\x10\x43\x91\xad\x72\xd4\xd2\xd4\x4a\xef\xd6\x3f\xad\xd1\x79\xb6\xca\x8d\xcd\xb3\x6c\xd5\x42\xbe\x53\xbc\x77\x9b\x4a\x9a\x76\x5d\xab\x9d\x62\xd1\x18\x89\x42\xaf\xa5\xd1\xd2\x38\xb2\x78\xd9\x03\x5e\x36\x6a\x43\x82\x8e\xeb\x16\x59\xd4\x82\x45\x9e\x95\x59\xb6\x5e\xc3\x5d\x78\x0d\x84\x1d\xa1\x45\xcd\x16\x78\x8f\x20\x8d\xde\xaa\x9d\x23\xc1\xca\x68\xd8\x1a\x0a\xa7\x83\x3a\x3e\x76\xd8\xdf\xb4\x4c\x4e\x32\xbc\x64\xbf\x03\xde\x77\xd1\xa8\x5a\x30\x02\x6a\xeb\x08\x3d\x9c\xe0\x70\x3b\xde\x5d\x40\x2b\x0b\x07\x7f\x23\xdb\x3a\x2d\xa1\xb0\x09\xb5\x1c\x70\x8a\x12\x90\xc8\x10\xbc\x64\x2b\x42\x76\xa4\x41\xab\xa6\x27\x43\xb2\x1e\x45\x1a\xcd\x42\xe9\xa8\xfd\x90\x0e\x7d\x97\x70\xd5\x3b\x01\xce\x7a\x31\x06\x6a\x64\xa4\x56\x69\x04\xb5\x05\x01\x1b\xa7\x9a\x1a\xec\xde\xb8\xa6\x06\x72\x3a\xf6\xd6\x03\x2f\x9a\xbb\xda\xa3\x7c\xba\xc5\x5f\x0e\x2d\x7b\xe9\x9e\x2e\xd0\xa4\x3a\x42\x89\xea\x80\x35\x6c\xc9\xb4\x91\x9b\x9c\x45\xd8\x1c\x67\xfe\x81\xf4\x38\x60\x3a\x8c\x2e\x44\xce\x19\xf8\x40\xbc\x4a\x36\xf7\x76\xc3\xa3\x4f\xc1\xc7\x3c\x22\xe5\x8f\xd9\xaa\xd7\xda\xff\x4f\x05\xc9\x86\xfc\x31\x69\xbf\x45\x51\xc3\xb3\x6a\x1a\x20\xff\xe4\xf5\xf8\x42\x2f\xaa\x33\xda\xe2\x44\x73\xf0\xeb\xa0\x7c\x5b\xb5\xd2\x69\x34\x04\x1f\xa6\x0a\xcb\x00\x58\x28\xdd\x39\x86\xfb\x87\xcd\x91\xf1\x74\x52\x9e\xa0\xfa\xa6\x5b\x41\x76\x2f\x9a\x58\x7c\x01\x54\xce\xed\x4c\xfc\xaf\xfa\xe9\x61\xb0\xf6\x73\x1b\x95\xfd\x8d\x9b\x09\xfb\xfe\x21\xb9\x13\x78\x3f\xa3\x4e\xd0\x91\x52\xbb\x76\x83\x04\x66\xdb\x67\xc7\x82\xd2\x3d\x47\x00\x18\x3c\x98\xc1\x96\x1e\xa9\x28\x41\x69\x9e\x34\xdd\xa0\x2e\x86\x16\x7f\x90\x62\x8c\xb6\x3f\x87\xc7\x53\xdf\xd9\x78\x9f\x8d\xe3\xb0\x67\x63\x9b\x6c\xa0\x13\xf4\x36\x77\x80\x7e\x65\x3d\x82\xe9\x5f\xf1\xf9\x93\xff\xd9\x40\x2a\x8c\xad\xee\x02\x7e\x59\xc5\xa3\x51\xdd\x35\xf2\x8d\x20\xd1\xfa\x95\xb0\xfd\x00\x4e\x77\x5f\x8c\x5e\x5b\xc6\x2e\x1a\x3c\xbf\xbb\x58\x94\x6b\xe4\x33\xac\xc9\x0e\x79\x39\xd6\x09\xf0\xdb\x2b\x12\xff\xde\x5d\x94\x59\xd9\xb8\x2e\xab\xd0\x96\x85\x45\x87\xa9\xae\x0b\x2f\xcf\xb9\x55\x63\x4b\xe7\xd8\xa9\x80\x96\xb8\xab\xaa\x9a\xb8\x96\x0e\x47\xdb\x06\x1f\x26\x86\x9c\xba\xf1\x25\x7d\x30\xa0\xad\x86\xc7\x54\xd5\x7f\x4b\x2e\x4c\xab\x18\xdb\x8e\x8f\x83\x2f\xe7\xcc\xfd\x44\xfd\x59\x52\x7f\xe3\xa6\x73\x7d\xfd\xe3\x36\xaf\x59\xa4\xfb\xc6\x9d\x23\xdd\x7e\xc8\x8b\x74\x4f\x80\x4f\xd2\xfd\x4e\xb8\x53\x68\xe7\xba\xff\x5b\x66\x47\xa1\xff\x9a\xd9\x3f\x01\x00\x00\xff\xff\x6a\xd0\x69\x97\xfa\x08\x00\x00")

func bootstrapSrcResourceGoBytes() ([]byte, error) {
	return bindataRead(
		_bootstrapSrcResourceGo,
		"bootstrap/src/resource.go",
	)
}

func bootstrapSrcResourceGo() (*asset, error) {
	bytes, err := bootstrapSrcResourceGoBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "bootstrap/src/resource.go", size: 2298, mode: os.FileMode(438), modTime: time.Unix(1591984416, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"bootstrap/src/.gitattributes": bootstrapSrcGitattributes,
	"bootstrap/src/.gitignore":     bootstrapSrcGitignore,
	"bootstrap/src/Dockerfile":     bootstrapSrcDockerfile,
	"bootstrap/src/Makefile":       bootstrapSrcMakefile,
	"bootstrap/src/README.md":      bootstrapSrcReadmeMd,
	"bootstrap/src/cmd.go":         bootstrapSrcCmdGo,
	"bootstrap/src/go.mod":         bootstrapSrcGoMod,
	"bootstrap/src/resource.go":    bootstrapSrcResourceGo,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"bootstrap": &bintree{nil, map[string]*bintree{
		"src": &bintree{nil, map[string]*bintree{
			".gitattributes": &bintree{bootstrapSrcGitattributes, map[string]*bintree{}},
			".gitignore":     &bintree{bootstrapSrcGitignore, map[string]*bintree{}},
			"Dockerfile":     &bintree{bootstrapSrcDockerfile, map[string]*bintree{}},
			"Makefile":       &bintree{bootstrapSrcMakefile, map[string]*bintree{}},
			"README.md":      &bintree{bootstrapSrcReadmeMd, map[string]*bintree{}},
			"cmd.go":         &bintree{bootstrapSrcCmdGo, map[string]*bintree{}},
			"go.mod":         &bintree{bootstrapSrcGoMod, map[string]*bintree{}},
			"resource.go":    &bintree{bootstrapSrcResourceGo, map[string]*bintree{}},
		}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}
